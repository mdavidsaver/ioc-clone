#!/usr/bin/env python3

import os
from collections import defaultdict

try:
    import epicscorelibs.path.cothread
except ImportError:
    pass

from cothread.catools import caget

def getargs():
    from argparse import ArgumentParser, FileType
    P = ArgumentParser(description="Capture a snapshot of a list of PVs as a runnable .db file.")
    P.add_argument('pvlist', type=FileType('r'), help='input PV name list')
    P.add_argument('db', help='output .db file')
    P.add_argument('-t','--timeout',default=5.0,type=float)
    return P

def main(args):
    records = defaultdict(set)
    rtypes = {}
    # build list of PVs to fetch
    for line in args.pvlist:
        line = line.strip()
        if line and line[0]!='#':
            rec, _dot, fld = line.partition('.')
            records[rec].add(fld or 'VAL')

    # inspect record type and intuit extra fields
    for val in caget([rec+'.RTYP' for rec in records], timeout=args.timeout, throw=False):
        rec, fld = val.name.split('.',1)

        if not val.ok or val in {'aai', 'aao', 'waveform'}:
            print('# skip record',rec)
            del records[rec]
            continue

        elif val not in {'ai', 'ao', 'bi', 'bo', 'mbbi', 'mbbo', 'longout', 'longin'}:
            print('# Unsupported record type', val)

        rtypes[rec] = val
        flds = records[rec]

        if val in ('bi', 'bo'):
            flds |= {'RVAL', 'ZNAM', 'ONAM', 'ZSV', 'OSV'}

        elif val in ('mbbi', 'mbbo'):
            flds |= {'RVAL'}
            for pref in ['ZR', 'ON', 'TW', 'TH', 'FR', 'FV', 'SX', 'SV', 'EI', 'NI', 'TE', 'EL', 'TV', 'TT', 'FT', 'FF']:
                for suf in ['ST','SV','VL']:
                    flds.add(pref+suf)

        elif val in ('ai', 'ao'):
            flds |= {'RVAL', 'PREC'}

        if val in ('longin', 'longout', 'ai', 'ao'):
            flds |= {'EGU', 'LOPR', 'HOPR', 'LOLO', 'LOW', 'HIGH', 'HIHI', 'LLSV', 'LSV', 'HSV', 'HHSV'}

        if val in ('ao', 'longout'):
            flds |= {'DRVL', 'DRVH'}

    # fetch
    values = defaultdict(dict)
    for val in caget(['%s.%s'%(rec,fld) for rec, flds in records.items() for fld in flds], timeout=args.timeout, throw=False):
        rec, fld = val.name.split('.',1)
        if val.ok:
            values[rec][fld] = val
        else:
            print("# missing", val.name)

    # write out
    with open(args.db+'.tmp', 'w') as F:
        for rec, flds in records.items():
            rtyp = rtypes[rec]
            vals = values[rec]
            F.write('record(%s, "%s") {\n'%(rtyp, rec))
            # ensure UDF cleared and valid timestamp
            F.write('    field(PINI, "YES")\n')

            for fld, val in vals.items():
                if fld in ('RTYP',):
                    continue
                elif fld=='RVAL':
                    # RVAL is epicsUInt32, which is promoted to double by CA,
                    # but field can't be initialized from double
                    val = int(val)
                F.write('    field(%s, "%s")\n'%(fld, val))

            F.write('}\n')

    os.rename(args.db+'.tmp', args.db)

if __name__=='__main__':
    main(getargs().parse_args())
